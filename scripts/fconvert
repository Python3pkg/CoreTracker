#!/usr/bin/env python

# CoreTracker Copyright (C) 2016  Emmanuel Noutahi
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from Bio import SeqIO
from coretracker.coreutils import CoreFile
from collections import defaultdict as ddict
import warnings
import os
import argparse
warnings.filterwarnings("ignore")


class SeqRep:
    def __init__(self, filelist, fmt):
        # in this case load it with SeqIO
        self.seqlist = ddict(list)
        if fmt == 'fasta':
            self._fasta_parser(filelist)
        elif fmt == 'corefile':
            self._core_parser(filelist)


    def export_as(self, outfmt, outdir, outfile="out.core", oneline=False):
        
        if outdir and not os.path.exists(outdir):
            os.makedirs(outdir)
        
        if outfmt == 'corefile':
            CoreFile.write_corefile(self.seqlist, os.path.join(outdir, outfile))

        elif outfmt == 'fasta':
            fastaseqs = self.__convert_to_fasta(self.seqlist)
            if oneline:
                for spec, recs in fastaseqs.items():
                    if len(recs) > 0:
                        SeqIO.write(recs, os.path.join(outdir, spec+".fasta"), 'fasta')
            else:
                for spec, recs in fastaseqs.items():
                    with open(os.path.join(outdir, spec+".fasta"), 'w') as OUT:
                        for seqrec in recs:
                            if len(seqrec) :
                                OUT.write('>%s\n%s\n'%(seqrec.id, str(seqrec.seq)))



    def _fasta_parser(self, flist):
        for f in flist:
            fname = os.path.basename(f).lower().split('.', 1)[0]

            for seqrec in SeqIO.parse(f, 'fasta'):
                geneid = seqrec.id.lower()
                seqrec.id = fname
                seqrec.name = fname
                self.seqlist[geneid].append(seqrec)
    
    def _core_parser(self, flist):
        if len(flist) != 1:
            raise Exception("Only one corefile should be converted into fasta format")
        self.seqlist = CoreFile(flist[0])


    def __convert_to_fasta(self, indict):
        """Convert a dict of species name to their content
        into CoreTracker format structure"""
        spec_genomes = ddict(list)
        for (gene, speclist) in indict.items():
            for seqrec in speclist:
                specname = seqrec.name
                seqrec.id = gene
                seqrec.name = gene
                seqrec.description = "" #"source="+seqrec.description            
                spec_genomes[specname].append(seqrec)
        return spec_genomes


if __name__ == '__main__':
    
    fmt_choices = ('fasta', 'corefile')
    # argument parser
    parser = argparse.ArgumentParser(
        description='Break a corefile into multiple fasta files or merge multiple fasta files into one corefile.')

    parser.add_argument('--infmt', dest='infmt', required=True, choices=fmt_choices, help="Input format")
    parser.add_argument('--outfmt', dest='outfmt', required=True,  choices=fmt_choices, default='outfmt', help="Output file format")
    parser.add_argument('--outdir', dest="outdir", default="", help="Working directory")
    parser.add_argument('--1line', dest="oneline", action="store_true", help="Working directory")
    parser.add_argument('--outfile', dest="outfile", help="OutFile name for corefile format file")
    parser.add_argument('seqs', metavar='infile1', nargs='+', help='List of input files')

    options = parser.parse_args()
    if options.outfmt != 'corefile' and options.outfile:
        parser.error('--outfile can only be set when --outfmt=corefile')

    seqreader = SeqRep(options.seqs, options.infmt)
    seqreader.export_as(options.outfmt, options.outdir, options.outfile, options.oneline)